<!DOCTYPE  html>
<html>
  <head>
    <meta charset="utf-8">
    
    <title>doc</title>
    <style>
      /*github.com style (c) Vasily Polovnyov <vast@whiteants.net>*/
      pre code {
        display: block; padding: 0.5em;
        color: #333;
        background: #f8f8ff
      }
      pre .comment,
      pre .template_comment,
      pre .diff .header,
      pre .javadoc {
        color: #998;
        font-style: italic
      }
      pre .keyword,
      pre .css .rule .keyword,
      pre .winutils,
      pre .javascript .title,
      pre .nginx .title,
      pre .subst,
      pre .request,
      pre .status {
        color: #333;
        font-weight: bold
      }
      pre .number,
      pre .hexcolor,
      pre .ruby .constant {
        color: #099;
      }
      pre .string,
      pre .tag .value,
      pre .phpdoc,
      pre .tex .formula {
        color: #d14
      }
      pre .title,
      pre .id {
        color: #900;
        font-weight: bold
      }
      pre .javascript .title,
      pre .lisp .title,
      pre .clojure .title,
      pre .subst {
        font-weight: normal
      }
      pre .class .title,
      pre .haskell .type,
      pre .vhdl .literal,
      pre .tex .command {
        color: #458;
        font-weight: bold
      }
      pre .tag,
      pre .tag .title,
      pre .rules .property,
      pre .django .tag .keyword {
        color: #000080;
        font-weight: normal
      }
      pre .attribute,
      pre .variable,
      pre .lisp .body {
        color: #008080
      }
      pre .regexp {
        color: #009926
      }
      pre .class {
        color: #458;
        font-weight: bold
      }
      pre .symbol,
      pre .ruby .symbol .string,
      pre .lisp .keyword,
      pre .tex .special,
      pre .prompt {
        color: #990073
      }
      pre .built_in,
      pre .lisp .title,
      pre .clojure .built_in {
        color: #0086b3
      }
      pre .preprocessor,
      pre .pi,
      pre .doctype,
      pre .shebang,
      pre .cdata {
        color: #999;
        font-weight: bold
      }
      pre .deletion {
        background: #fdd
      }
      pre .addition {
        background: #dfd
      }
      pre .diff .change {
        background: #0086b3
      }
      pre .chunk {
        color: #aaa
      }
    </style>
  </head>
  <body>  
    <h1 id="python-python-">python （利用python將數據圖形化）</h1>
<p>*</p>
<p><a href="https://gist.github.com/electronut/5641933"></a><a href="https://gist.github.com/electronut/5641933">https://gist.github.com/electronut/5641933</a></p>
<h2 id="python-serial-port-code-">python serial port (code)</h2>
<h1 id="-usr-bin-env-python">!/usr/bin/env python</h1>
<p>import sys, serial</p>
<p>import numpy as np</p>
<p>from time import sleep</p>
<p>from collections import deque</p>
<p>from matplotlib import pyplot as plt</p>
<h1 id="class-that-holds-analog-data-for-n-samples">class that holds analog data for N samples</h1>
<p>class AnalogData:</p>
<h1 id="constr">constr</h1>
<p>  def <strong>init</strong>(self, maxLen):</p>
<pre><code>self.a1 = deque([0.0]*maxLen)

self.a2 = deque([0.0]*maxLen)

self.a3 = deque([0.0]*maxLen)

self.a4 = deque([0.0]*maxLen)

self.maxLen = maxLen</code></pre>
<h1 id="ring-buffer">ring buffer</h1>
<p>  def addToBuf(self, buf, val):</p>
<pre><code>if len(buf) &lt; self.maxLen:

  buf.append(val)

else:

  buf.pop()

  buf.appendleft(val)</code></pre>
<h1 id="add-data">add data</h1>
<p>  def add(self, data):</p>
<pre><code>assert(len(data) == 4)

self.addToBuf(self.a1, data[0])

self.addToBuf(self.a2, data[1])

self.addToBuf(self.a3, data[2])

self.addToBuf(self.a4, data[3])</code></pre>
<h1 id="plot-class">plot class</h1>
<p>class AnalogPlot:</p>
<h1 id="constr">constr</h1>
<p>  def <strong>init</strong>(self, analogData):</p>
<pre><code># set plot to animated

plt.ion() 

self.a1line, = plt.plot(analogData.a1)

self.a2line, = plt.plot(analogData.a2)

self.a3line, = plt.plot(analogData.a3)

self.a4line, = plt.plot(analogData.a4)

plt.ylim([40, 50])</code></pre>
<h1 id="update-plot">update plot</h1>
<p>  def update(self, analogData):</p>
<pre><code>self.a1line.set_ydata(analogData.a1)

self.a2line.set_ydata(analogData.a2)

self.a3line.set_ydata(analogData.a3)

self.a4line.set_ydata(analogData.a4)

plt.draw()</code></pre>
<h1 id="main-function">main() function</h1>
<p>def main():</p>
<p>  strPort = &#39;/dev/ttyUSB0&#39;</p>
<h1 id="plot-parameters">plot parameters</h1>
<p>  analogData = AnalogData(100)</p>
<p>  analogPlot = AnalogPlot(analogData)</p>
<p>  print &#39;plotting data...&#39;</p>
<h1 id="open-serial-port">open serial port</h1>
<p>  ser = serial.Serial(strPort, 9600)</p>
<p>  while True:</p>
<pre><code>try:

  line = ser.readline()

  data = [float(val) for val in line.split(&#39;,&#39;)]

  #print data

  if(len(data) == 4):

    analogData.add(data)

    analogPlot.update(analogData)

except KeyboardInterrupt:

  print &#39;exiting&#39;

  break</code></pre>
<h1 id="close-serial">close serial</h1>
<p>  ser.flush()</p>
<p>  ser.close()</p>
<h1 id="call-main">call main</h1>
<p>if <strong>name</strong> == &#39;<strong>main</strong>&#39;:</p>
<p> main()</p>

  </body>
</html>
