<!DOCTYPE  html>
<html>
  <head>
    <meta charset="utf-8">
    
    <title>doc</title>
    <style>
      /*github.com style (c) Vasily Polovnyov <vast@whiteants.net>*/
      pre code {
        display: block; padding: 0.5em;
        color: #333;
        background: #f8f8ff
      }
      pre .comment,
      pre .template_comment,
      pre .diff .header,
      pre .javadoc {
        color: #998;
        font-style: italic
      }
      pre .keyword,
      pre .css .rule .keyword,
      pre .winutils,
      pre .javascript .title,
      pre .nginx .title,
      pre .subst,
      pre .request,
      pre .status {
        color: #333;
        font-weight: bold
      }
      pre .number,
      pre .hexcolor,
      pre .ruby .constant {
        color: #099;
      }
      pre .string,
      pre .tag .value,
      pre .phpdoc,
      pre .tex .formula {
        color: #d14
      }
      pre .title,
      pre .id {
        color: #900;
        font-weight: bold
      }
      pre .javascript .title,
      pre .lisp .title,
      pre .clojure .title,
      pre .subst {
        font-weight: normal
      }
      pre .class .title,
      pre .haskell .type,
      pre .vhdl .literal,
      pre .tex .command {
        color: #458;
        font-weight: bold
      }
      pre .tag,
      pre .tag .title,
      pre .rules .property,
      pre .django .tag .keyword {
        color: #000080;
        font-weight: normal
      }
      pre .attribute,
      pre .variable,
      pre .lisp .body {
        color: #008080
      }
      pre .regexp {
        color: #009926
      }
      pre .class {
        color: #458;
        font-weight: bold
      }
      pre .symbol,
      pre .ruby .symbol .string,
      pre .lisp .keyword,
      pre .tex .special,
      pre .prompt {
        color: #990073
      }
      pre .built_in,
      pre .lisp .title,
      pre .clojure .built_in {
        color: #0086b3
      }
      pre .preprocessor,
      pre .pi,
      pre .doctype,
      pre .shebang,
      pre .cdata {
        color: #999;
        font-weight: bold
      }
      pre .deletion {
        background: #fdd
      }
      pre .addition {
        background: #dfd
      }
      pre .diff .change {
        background: #0086b3
      }
      pre .chunk {
        color: #aaa
      }
    </style>
  </head>
  <body>  
    <h1 id="qcopterflightcontrol-reading-note">QCopterFlightControl Reading Note</h1>
<p>這個專頁為分享閱讀<a href="https://github.com/Hom19910422">Hom</a>的QCopterFlightControl的一些筆記。</p>
<p>github: <a href="https://github.com/Hom19910422/QCopterFlightControl"></a><a href="https://github.com/Hom19910422/QCopterFlightControl">https://github.com/Hom19910422/QCopterFlightControl</a></p>
<p>學習四軸飛行器基本知識</p>
<p><a href="http://blog.oscarliang.net/build-a-quadcopter-beginners-tutorial-1/"></a><a href="http://blog.oscarliang.net/build-a-quadcopter-beginners-tutorial-1/"><a href="http://blog.oscarliang.net/build-a-quadcopter-beginners-tutorial-1/">http://blog.oscarliang.net/build-a-quadcopter-beginners-tutorial-1/</a></a></p>
<p>姿態推導</p>
<p><a href="http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf"></a><a href="http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf">http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf</a></p>
<h2 id="-">如何讓飛控板一開始就進行穩定控制</h2>
<p>因為原始作者使用自行設計的遙控器,但是我們並沒有這個遙控器,所以如果我們要用市售的rc遙控器必須用pwm input去控制系統給roll, pitch ,yaw,thrust，所以要先設計一個可以接受pwm訊號控制的軟體。</p>
<ul>
<li><p>在QCopterFC_transport.h這裡發現接收rf訊號時裡面有幾個參數是控制的參數</p>
</li>
<li><h1 id="define-exp_pitch-recvdata-20-">define Exp_Pitch   RecvData[20]</h1>
</li>
<li><h1 id="define-exp_roll-recvdata-21-">define Exp_Roll    RecvData[21]</h1>
</li>
<li><h1 id="define-exp_yaw-recvdata-22-">define Exp_Yaw     RecvData[22]</h1>
</li>
<li><h1 id="define-exp_thr-recvdata-23-">define Exp_Thr     RecvData[23]</h1>
</li>
<li><p>void SysTick_Handler( void )</p>
</li>
<li><p>/<em> Check Connection </em>/</p>
</li>
<li><a href="/ep/search/?q=%23define&amp;via=Shw0s5MqHBf"> </a><a href="https://embeddedcool.hackpad.com/ep/search/?q=%23define&amp;via=Shw0s5MqHBf">#define</a> NoSignal 1  // 1 sec</li>
<li>if(KEYR_L == 0)</li>
<li>Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);</li>
<li>else if(((Time_Sec-RecvTime_Sec)&gt;NoSignal) || ((Time_Sec-RecvTime_Sec)&lt;-NoSignal))</li>
<li>Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);</li>
<li>else     </li>
<li>Motor_Control(Final_M1, Final_M2, Final_M3, Final_M4);</li>
</ul>
<p>KEYR_L == 0為讓馬達設為最低轉速，經作者王文宏證實這個變數代表著關油門；第五至六行應為判斷無rf訊號也關油門。如果把這些都刪掉只留下第8行我們就可以讓飛控板一開始就可以進行平衡的控制</p>
<h2 id="pwm">PWM</h2>
<p>[<a href="http://www.360doc.com/content/11/0917/23/7736891_149119727.shtml">pwm教學</a> ]解釋多個PWM可由一個TIM控制</p>
<p>PWM有兩種mode分別為模式1 模式2</p>
<p>模式1</p>
<p>脈衝寬度調製模式可以產生一個由TIMx_ARR寄存器確定頻率、由TIMx_CCRx寄存器確定占空比的信號。</p>
<p>在TIMx_CCMRx寄存器中的OCxM位寫入’110’(PWM模式1)或’111’(PWM模式2)，能夠獨立地設置每個OCx輸出通道產生一路PWM。必須設置TIMx_CCMRx寄存器OCxPE位以使能相應的預裝載寄存器，最後還要設置TIMx_CR1寄存器的ARPE位使能自動重裝載的預裝載寄存器(在向上計數或中心對稱模式中)。</p>
<p>在PWM模式(模式1或模式2)下，TIMx_CNT和TIM1_CCRx始終在進行比較，(依據計數器的計數方向)以確定是否符合TIM1_CCRx≤TIM1_CNT或者TIM1_CNT≤TIM1_CCRx。然而為了與OCREF_CLR的功能(在下一個PWM週期之前，ETR信號上的一個外部事件能夠清除OCxREF)一致，OCxREF信號只能在下述條件下產生：</p>
<p>110：PWM模式1－在向上計數時，一旦TIMx_CNT<TIMx_CCR1時通道1為有效電平，否則為無效電平；在向下計數時，一旦TIMx_CNT>TIMx_CCR1時通道1為無效電平(OC1REF=0)，否則為有效電平(OC1REF=1)。</p>
<p>111：PWM模式2－在向上計數時，一旦TIMx_CNT<TIMx_CCR1時通道1為無效電平，否則為有效電平；在向下計數時，一旦TIMx_CNT>TIMx_CCR1時通道1為有效電平，否則為無效電平。</p>
<p>本例展示了如何設置TIM工作在脈衝寬度調製模式（PWM Pulse Width Modulation</p>
<p>mode）。</p>
<p>TIM3時鐘設置為36MHz，預分頻設置為0，TIM2計數器時鐘可表達為：</p>
<p>TIM3 counter clock = TIMxCLK / (Prescaler +1) = 36 MHz</p>
<p>設置TIM3_CCR1寄存器值為500，則TIM3通道1產生一個頻率為36MHz，占空比（duty cycle）為50%的PWM信號。</p>
<p>同理，根據寄存器TIM3_CCR2 、TIM3_CCR3和 TIM3_CCR4的值，TIM3通道2產生一個頻率為36MHz，占空比（duty cycle）為37.5%的PWM信號；TIM3通道1產生一個頻率為36MHz，占空比（duty cycle）為25%的PWM信號；TIM3通道1產生一個頻率為36MHz，占空比（duty cycle）為12.5%的PWM信號。</p>
<p>可以通過示波器，在相應管腳觀察到輸出信號。</p>
<ul>
<li>u16 CCR1_Val = 500;</li>
<li>u16 CCR2_Val = 375;</li>
<li>u16 CCR3_Val = 250;</li>
<li>u16 CCR4_Val = 125;</li>
<li></li>
<li>TIM_TimeBaseStructure.TIM_Period = 999;         </li>
<li>TIM_TimeBaseStructure.TIM_Prescaler = 0;      </li>
<li>TIM_TimeBaseStructure.TIM_ClockDivision = 0;   </li>
<li>TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;</li>
<li>TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure);</li>
<li>TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;         </li>
<li>TIM_OCInitStructure.TIM_Channel = TIM_Channel_1;         </li>
<li>TIM_OCInitStructure.TIM_Pulse = CCR1_Val; </li>
<li>TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;   </li>
<li>TIM_OCInit(TIM3, &amp;TIM_OCInitStructure);</li>
<li><em>启用CCR1寄存器的影子寄存器（直到产生更新事件才更改设置）</em></li>
<li>TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);</li>
<li></li>
<li>TIM_OCInitStructure.TIM_Channel = TIM_Channel_2;         </li>
<li>TIM_OCInitStructure.TIM_Pulse = CCR2_Val; </li>
<li></li>
<li>TIM_OCInit(TIM3, &amp;TIM_OCInitStructure);</li>
<li>TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);</li>
<li></li>
<li>TIM_OCInitStructure.TIM_Channel = TIM_Channel_3;         </li>
<li>TIM_OCInitStructure.TIM_Pulse = CCR3_Val; </li>
<li></li>
<li>TIM_OCInit(TIM3, &amp;TIM_OCInitStructure);</li>
<li>TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);</li>
<li></li>
<li>TIM_OCInitStructure.TIM_Channel = TIM_Channel_4;         </li>
<li>TIM_OCInitStructure.TIM_Pulse = CCR4_Val; </li>
<li></li>
<li>TIM_OCInit(TIM3, &amp;TIM_OCInitStructure);</li>
<li>TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);</li>
<li></li>
<li>TIM_ARRPreloadConfig(TIM3, ENABLE);</li>
<li></li>
<li>TIM_Cmd(TIM3, ENABLE);</li>
<li>while (1)</li>
<li>{</li>
<li>} </li>
<li>}</li>
</ul>
<h2 id="-pwm-file">飛控板上的PWM宣告用到的file</h2>
<ul>
<li><p>module_motor.c file</p>
</li>
<li><p>GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);</p>
</li>
<li>GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM3);</li>
<li>GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM3);</li>
<li><p>GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_TIM3);</p>
</li>
<li><p>module_motor.h file</p>
</li>
<li><h1 id="define-pwm_motor1-tim3-ccr1-pwm">define PWM_Motor1 TIM3-&gt;CCR1   // 無刷 PWM</h1>
</li>
<li><h1 id="define-pwm_motor2-tim3-ccr2-pwm">define PWM_Motor2 TIM3-&gt;CCR2   // 無刷 PWM</h1>
</li>
<li><h1 id="define-pwm_motor3-tim3-ccr3-pwm">define PWM_Motor3 TIM3-&gt;CCR3   // 無刷 PWM</h1>
</li>
<li><h1 id="define-pwm_motor4-tim3-ccr4-pwm">define PWM_Motor4 TIM3-&gt;CCR4   // 無刷 PWM</h1>
</li>
</ul>
<p>CCR代表控制脈波寬度調變得週期大小 chanel</p>
<p><img src="https://hackpad-attachments.s3.amazonaws.com/hackpad.com_Shw0s5MqHBf_p.94311_1385729095049_pwm" alt=""></p>
<h2 id="-">飛控板開啟流程</h2>
<h2 id="pwm-input-capture">PWM Input Capture</h2>
<p>市售遙控器原理為:</p>
<p>操作搖桿產生PWM singal -&gt;RF Modulation-&gt;RF Demodulation-&gt;PWM signal-&gt;飛控板</p>
<p>所以要解析遙控器的訊號重點為如何處理PWM Input Capture-&gt;連結</p>

  </body>
</html>
