<h1 id="-">程式討論</h1>
<h2 id="make-openocd-">make openocd 使用教學</h2>
<p>有時候程式碼雖然編過了, 但居然還是錯的, 所以我們可以利用make openocd 來讓gdbauto可以對我們的STM32F4Discovery進行除錯.</p>
<p>step1. 到<a href="http://wiki.csie.ncku.edu.tw/embedded/Lab24">成大資工wiki Lab24</a>下載openocd</p>
<p>step2. 都下載完後, 必須設定路徑：vim ~/.bashrc　</p>
<p>　　　進去後最下面打上　<strong>export PATH=/opt/openocd/bin:$PATH</strong></p>
<p>step3. 在make 後, 打上make openocd   (一定要先make才有elf)</p>
<p>step4. 按 [<strong>ctrl+shift+t</strong> ] (進入另一個終端機)</p>
<p>step5. 打 <strong>make gdbauto</strong>  (即可看到除錯畫面)</p>
<p>step6. 打 <strong>monitor reset halt</strong>  或按 reset 鈕  (讓系統重置)</p>
<ul>
<li>如果停在xxxstartup.s的檔案代表正確重開，可以重新debug</li>
</ul>
<p>step7. 可以看到直接進入中斷點  （前提必須在 <strong>.gdb</strong>的檔案設置好）</p>
<ul>
<li>gdb script</li>
</ul>
<p>step8. 利用usart 配合 gdb裡的<strong>print</strong> 可以直接在usart觀察變數的變化 </p>
<p>補充<a href="https://www.facebook.com/download/1440219162873171/refcard.pdf">：GDB cheat sheet</a>（gdb的指令使用）</p>
<h2 id="coding-style">Coding Style</h2>
<p><strong>如何使用astyle自動排版?</strong></p>
<p>1.下載astyle</p>
<p><a href="http://downloads.sourceforge.net/project/astyle/astyle/astyle%202.04/astyle_2.04_linux.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fastyle%2Ffiles%2Fastyle%2Fastyle%25202.04%2F&amp;ts=1386641171&amp;use_mirror=jaist"></a><a href="http://downloads.sourceforge.net/project/astyle/astyle/astyle%202.04/astyle_2.04_linux.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fastyle%2Ffiles%2Fastyle%2Fastyle%25202.04%2F&amp;ts=1386641171&amp;use_mirror=jaist">http://downloads.sourceforge.net/project/astyle/astyle/astyle%202.04/astyle_2.04_linux.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fastyle%2Ffiles%2Fastyle%2Fastyle%25202.04%2F&amp;ts=1386641171&amp;use_mirror=jaist</a></p>
<p>2.編譯檔案</p>
<p>解壓縮檔案後，到astyle資料夾下的/astyle/build/gcc打入指令</p>
<p>make</p>
<p>會看到該資料夾下面多了bin及obj資料夾</p>
<p>3.移動檔案到usr/local</p>
<p>sudo cp ./astyle /usr/local/bin/astyle</p>
<p>4.設定astyle參數</p>
<p>vim ~/.astylerc</p>
<ul>
<li>style=linux</li>
<li>indent=force-tab=8</li>
<li>indent-cases</li>
<li>indent-preprocessor</li>
<li>break-blocks=all</li>
<li>pad-oper</li>
<li>pad-header</li>
<li>unpad-paren</li>
<li>keep-one-line-blocks</li>
<li>keep-one-line-statements</li>
<li>align-pointer=name</li>
<li>align-reference=name</li>
<li>suffix=none</li>
<li>ignore-exclude-errors-x</li>
<li>lineend=linux</li>
<li>exclude=EASTL</li>
</ul>
<p>5.利用astyle自動排版   </p>
<ul>
<li>Example to format a single file:  </li>
<li><p>astyle    /home/user/project/foo.cpp</p>
</li>
<li><p>Example to format all .cpp and .h files recursively:     </p>
</li>
<li><p>astyle   --recursive  /home/user/project/<em>.cpp  /home/user/project/</em>.h</p>
<p><a href="http://astyle.sourceforge.net/astyle.html#_Quick_Start"></a><a href="http://astyle.sourceforge.net/astyle.html#_Quick_Start">http://astyle.sourceforge.net/astyle.html#_Quick_Start</a>   </p>
<p><a href="https://pixhawk.ethz.ch/px4/dev/code_style"></a><a href="https://pixhawk.ethz.ch/px4/dev/code_style">https://pixhawk.ethz.ch/px4/dev/code_style</a></p>
<p><strong>變數宣告</strong></p>
<p>下列例如s32及s16不建議使用，此為舊的變數型態，統一使用int32_t(左側)尚未typedef的型態</p>
</li>
<li><p>/<em>!&lt; STM32F10x Standard Peripheral Library old types (maintained for legacy purpose) </em>/</p>
</li>
<li>typedef int32_t  s32;</li>
<li>typedef int16_t s16;</li>
<li>typedef int8_t  s8;
<em>*   typedef const int32_t sc32;  /</em>!&lt; Read Only */</li>
<li>typedef const int16_t sc16;  /<em>!&lt; Read Only </em>/</li>
<li>typedef const int8_t sc8;   /<em>!&lt; Read Only </em>/
**   typedef __IO int32_t  vs32;</li>
<li>typedef __IO int16_t  vs16;</li>
<li>typedef <strong>IO int8_t   vs8;
**   typedef </strong>I int32_t vsc32;  /<em>!&lt; Read Only </em>/</li>
<li>typedef __I int16_t vsc16;  /<em>!&lt; Read Only </em>/</li>
<li>typedef __I int8_t vsc8;   /<em>!&lt; Read Only </em>/
**   typedef uint32_t  u32;</li>
<li>typedef uint16_t u16;</li>
<li>typedef uint8_t  u8;</li>
<li></li>
<li>typedef const uint32_t uc32;  /<em>!&lt; Read Only </em>/</li>
<li>typedef const uint16_t uc16;  /<em>!&lt; Read Only </em>/</li>
<li>typedef const uint8_t uc8;   /<em>!&lt; Read Only </em>/    </li>
<li>typedef __IO uint32_t  vu32;</li>
<li>typedef __IO uint16_t vu16;</li>
<li>typedef __IO uint8_t  vu8;</li>
<li>typedef __I uint32_t vuc32;  /<em>!&lt; Read Only </em>/</li>
<li>typedef __I uint16_t vuc16;  /<em>!&lt; Read Only </em>/</li>
<li>typedef __I uint8_t vuc8;   /<em>!&lt; Read Only </em>/</li>
</ul>
<h2 id="-">自訂型態</h2>
<p><a href="http://www.cmlab.csie.ntu.edu.tw/~perng/course/chap5/chap5.html"></a><a href="http://www.cmlab.csie.ntu.edu.tw/~perng/course/chap5/chap5.html">http://www.cmlab.csie.ntu.edu.tw/~perng/course/chap5/chap5.html</a></p>
<p>printf(&quot;%d, %s&quot;, v, str); 如果自己想寫【動態引數】該怎麼寫？</p>
<p><a href="http://blog.udn.com/cchahacaptain/2238613"></a><a href="http://blog.udn.com/cchahacaptain/2238613">http://blog.udn.com/cchahacaptain/2238613</a></p>
<ul>
<li><h1 id="include-stdio-h-">include <stdio.h></h1>
**   struct foo {</li>
<li>int test;</li>
<li>};
<em>*   int f(struct foo </em>foo_input)</li>
<li>{</li>
<li>printf(&quot;%d\n&quot;, (*foo_input).test); // = printf(&quot;%d\n&quot;, foo_input-&gt;test);</li>
<li>}
**   int main()</li>
<li>{</li>
<li>struct foo foo1;</li>
<li>foo1.test = 1;
**     f(&amp;foo1);</li>
<li>return 0;</li>
<li>}</li>
</ul>
<h2 id="makefile-">makefile教學</h2>
<p><a href="http://kevincrazy.pixnet.net/blog/post/29780477-makefile%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8"></a><a href="http://kevincrazy.pixnet.net/blog/post/29780477-makefile%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8">http://kevincrazy.pixnet.net/blog/post/29780477-makefile%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8</a>...</p>
<p><a href="http://tetralet.luna.com.tw/?op=ViewArticle&amp;articleId=185"></a><a href="http://tetralet.luna.com.tw/?op=ViewArticle&amp;articleId=185">http://tetralet.luna.com.tw/?op=ViewArticle&amp;articleId=185</a></p>
<p>gcc</p>
<p>gcc教學 vim makefile</p>
<p>CC = gcc</p>
<p>BIN = test</p>
<p>all:test.c</p>
<pre><code>    $(CC) -o $(BIN) test.c</code></pre>
<p>clean:</p>
<pre><code>    rm -f $(BIN)</code></pre>
<p>.PHONY:clean</p>

